// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package repository

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  id, user_id, bank, number
) VALUES (
  ?,?,?,?
)
RETURNING id, user_id, bank, number, created_at, updated_at
`

type CreateAccountParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	Bank   string
	Number string
}

// account
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.UserID,
		arg.Bank,
		arg.Number,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bank,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  id, account_id, date, credit, amount
) VALUES (
  ?,?,?,?,?
)
RETURNING id, account_id, date, credit, amount, created_at, updated_at
`

type CreateTransactionParams struct {
	ID        uuid.UUID
	AccountID uuid.UUID
	Date      time.Time
	Credit    bool
	Amount    string
}

// transactions
func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.AccountID,
		arg.Date,
		arg.Credit,
		arg.Amount,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Date,
		&i.Credit,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, first_name, last_name, email
) VALUES (
  ?,?,?,?
)
RETURNING id, first_name, last_name, email, created_at, updated_at
`

type CreateUserParams struct {
	ID        uuid.UUID
	FirstName string
	LastName  string
	Email     string
}

// users
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, user_id, bank, number, created_at, updated_at FROM accounts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAccountByID(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bank,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByUserID = `-- name: GetAccountByUserID :one
SELECT id, user_id, bank, number, created_at, updated_at FROM accounts
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetAccountByUserID(ctx context.Context, userID uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUserID, userID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bank,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionsByAccountID = `-- name: GetTransactionsByAccountID :many
SELECT id, account_id, date, credit, amount, created_at, updated_at FROM transactions
WHERE account_id = ?
`

func (q *Queries) GetTransactionsByAccountID(ctx context.Context, accountID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Date,
			&i.Credit,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByAccountID = `-- name: GetUserByAccountID :one
SELECT users.id, first_name, last_name, email, users.created_at, users.updated_at, accounts.id, user_id, bank, number, accounts.created_at, accounts.updated_at FROM users
LEFT JOIN accounts
ON users.ID = accounts.user_id
WHERE accounts.ID = ? LIMIT 1
`

type GetUserByAccountIDRow struct {
	ID          uuid.UUID
	FirstName   string
	LastName    string
	Email       string
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	ID_2        uuid.UUID
	UserID      uuid.UUID
	Bank        sql.NullString
	Number      sql.NullString
	CreatedAt_2 sql.NullTime
	UpdatedAt_2 sql.NullTime
}

func (q *Queries) GetUserByAccountID(ctx context.Context, id uuid.UUID) (GetUserByAccountIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByAccountID, id)
	var i GetUserByAccountIDRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.UserID,
		&i.Bank,
		&i.Number,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, created_at, updated_at FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, email, created_at, updated_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
